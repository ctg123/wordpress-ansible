###########################################################
# Ansible Playbooks: Wordpress on Ubuntu 18.04 LAMP Stack #   
###########################################################
---
- name: Install Wordpress with LAMP Stack
  remote_user: admin
  hosts: all
  become: true
  gather_facts: true

  vars_files:
    - vars/default.yml

  pre_tasks:
    - name: Update apt cache if needed
      apt: name=aptitude update_cache=yes state=latest force_apt_get=yes
      tags: [ system ] 

    - name: Get software for apt repository management
      apt: name={{ item }} update_cache=yes state=present
      loop: ['python3-apt', 'python3-pycurl', 'python3-pip', 'python3-setuptools', 'python3-dev', 'build-essential', 'unzip', 'acl', 'git', 'sendmail' ]
      tags: [ system ]

    - name: Ensure required dependencies for MySQL are installed
      apt: name={{ item }} update_cache=yes state=present
      loop: ['python3-pymysql' ]
      tags: [ system, mysql ]

    - name: Add ondrej repository for later versions of PHP
      apt_repository: repo='ppa:ondrej/php' update_cache=yes
      tags: [ system, php ]

  tasks:
    - name: Add MySQL repository key
      apt_key:
         keyserver: pgp.mit.edu
         id: 5072E1F5
         state: present
      tags: [ system, mysql ]

    - name: Add official MySQL 5.7 Ubuntu Bionic repository
      apt_repository:
        repo: "deb http://repo.mysql.com/apt/ubuntu bionic mysql-5.7"
        state: present
      tags: [ system, mysql ]

    - name: Install MySQL dependencies
      apt: name={{ item }} update_cache=yes state=present
      loop: ['mysql-common', 'mysql-server', 'mysql-client' ]
      tags: [ system, mysql ]

    - name: Install Baseline LAMP Packages
      apt: name={{ item }} update_cache=yes state=latest
      loop: [ 'apache2', 'php-apcu', 'php7.4-common', 'php7.4-mysql', 'libapache2-mod-php7.4', 'libpcre3-dev' ]
      tags: [ system ]

    - name: Install PHP Extensions
      apt: name={{ item }} update_cache=yes state=latest
      loop: "{{ php_modules }}"
      tags: [ system ]

    - name: Ensure MySQL is running and starts on boot
      service:
        name=mysql state=started enabled=true
      tags: [ mysql ]


  ########################
  # Apache Configuration #
  ########################

    - name: Create document root
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        owner: "www-data"
        group: "www-data"
        mode: '0755'
      tags: [ apache ]

    - name: Set up Apache VirtualHost
      template:
        src: "files/apache.conf.j2"
        dest: "/etc/apache2/sites-available/{{ http_conf }}"
      notify: Reload Apache
      tags: [ apache ]

    - name: Enable rewrite module
      shell: /usr/sbin/a2enmod rewrite
      notify: Reload Apache
      tags: [ apache ]

    - name: Enable new site
      shell: /usr/sbin/a2ensite {{ http_conf }}
      notify: Reload Apache
      tags: [ apache ]

    - name: Disable default Apache site
      shell: /usr/sbin/a2dissite 000-default.conf
      notify: Restart Apache
      tags: [ apache ]

  #######################
  # MySQL Configuration #
  #######################
    - name: Copy initial MySQL client config file, no password for root
      copy:
        src: "files/client.my.cnf"
        dest: "/root/.my.cnf"
      tags: [ mysql ]
 
    - name: Update MySQL root password for all root accounts
      become: true
      mysql_user:
        name: root
        host: "{{ item }}"
        password: "{{ mysql_root_password }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        check_implicit_admin: yes
        priv: "*.*:ALL,GRANT"
      with_items:
        - 127.0.0.1
        - ::1
        - localhost
        - "{{ ansible_host }}"
      tags: [ mysql ] 

    - name: Create `/root/.my.cnf` with root password crendtials
      become: yes
      template: 
        src: "files/client.my.cnf.j2"
        dest: "/root/.my.cnf"
        owner: root
        mode: 0600
      tags: [ mysql ]

    - name: Create database for Wordpress
      become: true
      mysql_db:
        name: "{{ mysql_db }}"
        state: present
        login_user: root 
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Create MySQL user for Wordpress
      become: true
      mysql_user: 
        name: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        priv: "{{ mysql_db }}.*:ALL"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]
 
  #####################
  # UFW Configuration #
  #####################

    - name: "UFW - Allow HTTP on port {{ http_port }}"
      ufw:
        rule: allow
        port: "{{ http_port }}"
        proto: tcp
      tags: [ system ]

  ###########################
  # WordPress Configuration #
  ###########################

    - name: Download and unpack latest WordPress
      unarchive:
        src: https://wordpress.org/latest.tar.gz
        dest: "/var/www/{{ http_host }}"
        remote_src: yes
        creates: "/var/www/{{ http_host }}/wordpress"
      tags: [ wordpress ]

    - name: Set ownership
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
      tags: [ wordpress ]

    - name: Set permissions for directories
      shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type d -exec chmod 750 {} \\;"
      tags: [ wordpress ]

    - name: Set permissions for files
      shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type f -exec chmod 640 {} \\;"
      tags: [ wordpress ]

    - name: Set up wp-config
      template:
        src: "files/wp-config.php.j2"
        dest: "/var/www/{{ http_host }}/wordpress/wp-config.php"
      tags: [ wordpress ]

  handlers:
    - name: Reload Apache
      service:
        name: apache2
        state: reloaded

    - name: Restart Apache
      service:
        name: apache2
        state: restarted
